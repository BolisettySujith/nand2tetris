// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: tools/builtIn/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yï¿½x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
    PARTS:
   // Put you code here:
   //Mux16 for x value output
    Mux16(a= x, b= false, sel= zx, out= zxob);
    Not16(in= zxob, out= notzxob);
    Mux16(a= zxob, b= notzxob, sel= nx, out= x1);
    //Mux16 for y value output
    Mux16(a= y, b= false, sel= zy, out= zyob);
    Not16(in= zyob, out= notzyob);
    Mux16(a= zyob, b= notzyob, sel= ny, out= y1);
    //Add16 of output x1 and y1
    Add16(a= x1, b= y1, out= x1ory1);
    //And16 of output x1 and y1 
    And16(a= x1, b= y1, out= x1Andy1);
    //Mux16 for output of Add16 and And16
    Mux16(a= x1Andy1, b= x1ory1, sel= f, out= fxy);
    Not16(in= fxy, out= notfxy);
    //output of ng
    Mux16(a= fxy, b= notfxy, sel= no,out= out, out[0..7]= lsbByte, out[8..15]= msbByte, out[15]= ng);
    //Or8Way of lsbByte and msbByte
    Or8Way(in=lsbByte, out= lsbcnt);
    Or8Way(in= msbByte, out= msbcnt);
    //Or of lsbcnt and msbcnt
    Or(a= lsbcnt, b= msbcnt, out= nzr);
    //output of zr
    Not(in= nzr, out=zr);
}